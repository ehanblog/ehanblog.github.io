<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS</title>
    <url>/2023/03/31/CSS/</url>
    <content><![CDATA[<h1 id="编辑中…………"><a href="#编辑中…………" class="headerlink" title="编辑中…………."></a>编辑中………….</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Html</title>
    <url>/2023/03/31/Html/</url>
    <content><![CDATA[<h1 id="编辑中…………"><a href="#编辑中…………" class="headerlink" title="编辑中…………."></a>编辑中………….</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Docker安装使用以及常见命令</title>
    <url>/2023/03/29/Docker/</url>
    <content><![CDATA[<h2 id="第一章-Docker简介"><a href="#第一章-Docker简介" class="headerlink" title="第一章 Docker简介"></a>第一章 Docker简介</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 是一个开源的应用容器引擎,他可以帮助开发者和开发团队构建和发布应用(开发者将自己的应用打包到这个轻量级可移植的容器中),然后发布到任何流行的Linux平台上面。容器是完全使用沙箱机制,相互之间不会有任何影响,并且容器的开销极低。</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第二章-Docker安装"><a href="#第二章-Docker安装" class="headerlink" title="第二章 Docker安装"></a>第二章 Docker安装</h2><h3 id="第1节-CentOS系统安装文档地址"><a href="#第1节-CentOS系统安装文档地址" class="headerlink" title="第1节 CentOS系统安装文档地址"></a>第1节 CentOS系统安装文档地址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.docker.com/engine/install/centos/</span><br></pre></td></tr></table></figure>

<h3 id="第2节-系统需求"><a href="#第2节-系统需求" class="headerlink" title="第2节 系统需求"></a>第2节 系统需求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Docker 需要Centos7或者8,并且是长期支持版本不能是测试版本</span><br><span class="line">2. 必须启用 centos-extras 存储库,这个库是默认启动的,如果你的电脑禁用这个库,请自行启动.</span><br><span class="line">3. Docker要求Linux内核版本最好是大于3.10版本,因为大于3.10版本的内核包含了运行Docker的特定修改</span><br><span class="line">	-&gt; 内核版本查看 uname -r</span><br><span class="line">    -&gt; 升级内核     yum install -y kernel (通过yum升级风险最低)</span><br><span class="line">4. 安装 gcc和gcc-c++编译器,如果本机中存在可以不装</span><br><span class="line">	-&gt; yum -y install gcc</span><br><span class="line">	-&gt; yum -y install gcc-c++</span><br><span class="line">5. 卸载旧版本的docker</span><br><span class="line">	yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">6. 安装依赖包</span><br><span class="line">	-&gt; yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">7. 设置stable镜像仓库(官网/阿里云,用哪一个都可以)</span><br><span class="line">	-&gt; yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    或者</span><br><span class="line">    -&gt; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">8. 更新yum软件包索引</span><br><span class="line">	-&gt; yum makecache fast</span><br></pre></td></tr></table></figure>

<h3 id="第3节-Docker安装"><a href="#第3节-Docker安装" class="headerlink" title="第3节 Docker安装"></a>第3节 Docker安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 搜索当前的Docker版本,版本由高到低排列  </span><br><span class="line">    -&gt; yum list docker-ce.x86_64  --showduplicates | sort -r</span><br><span class="line">    </span><br><span class="line">    docker-ce.x86_64            3:20.10.2-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:20.10.2-3.el7                    @docker-ce-stable</span><br><span class="line">    docker-ce.x86_64            3:20.10.1-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:20.10.0-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.9-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.8-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.7-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.6-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable </span><br><span class="line">    docker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable </span><br><span class="line">    </span><br><span class="line">2. 安装指定版本的Docker</span><br><span class="line">    -&gt; yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">    将上面查到的版本替换下面的&lt;VERSION-STRING&gt;</span><br><span class="line">    版本号截取方式在第二列中从冒号(:)开始,短横线(-)结束中间的那段为版本(例如 3:20.10.2-3.el7 的版本为 20.10.2)替换&lt;VERSION_STRING&gt;即可</span><br><span class="line">    </span><br><span class="line">3. 例如安装命令 </span><br><span class="line">     -&gt; yum install docker-ce-20.10.4 docker-ce-cli-20.10.4 containerd.io</span><br><span class="line"></span><br><span class="line">4. 安装完成启动</span><br><span class="line">    -&gt; systemctl start docker</span><br><span class="line">5. 测试</span><br><span class="line">    -&gt; docker run hello-world</span><br><span class="line">    --&gt; 国外的docker镜像仓库下载镜像缓慢,可以设置国内镜像地址</span><br><span class="line">    	1. 进入 cd /etc/docker/ 目录下查看是否有daemon.json文件,如果没有就自己手动创建一个</span><br><span class="line">    	2. 如果存在daemon.json文件将下面的信息保存到daemon.json中</span><br><span class="line">    	&#123;</span><br><span class="line">         &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">6. 设置开机启动</span><br><span class="line">    -&gt; systemctl enable docker</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第三章-Docker基本操作命令"><a href="#第三章-Docker基本操作命令" class="headerlink" title="第三章 Docker基本操作命令"></a>第三章 Docker基本操作命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 查看Docker版本</span><br><span class="line">	-&gt; docker version</span><br><span class="line">2. 搜索镜像(例如 搜索一个centos镜像)</span><br><span class="line">	-&gt; docker search centos</span><br><span class="line">3. 拉取镜像(例如拉取centos镜像,将其下载到本地)</span><br><span class="line">	-&gt; docker pull centos</span><br><span class="line">4. 列出当前Docker平台镜像</span><br><span class="line">	-&gt; docker images</span><br><span class="line">	</span><br><span class="line">	以下为本机展示的镜像列表</span><br><span class="line">	REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">    centos        latest    300e315adb2f   4 weeks ago     209MB</span><br><span class="line">    hello-world   latest    bf756fb1ae65   12 months ago   13.3kB</span><br><span class="line">	</span><br><span class="line">	--&gt; REPOSITORY: 镜像仓库源</span><br><span class="line">	--&gt; TAG: 镜像的标签</span><br><span class="line">	--&gt; IMAGE ID: 镜像ID</span><br><span class="line">	--&gt; CREATED: 镜像创建时间</span><br><span class="line">	--&gt; SIZE: 镜像大小</span><br><span class="line"></span><br><span class="line">5. 删除镜像</span><br><span class="line">	-&gt; docker rmi [镜像名称/镜像ID]</span><br><span class="line">		--&gt; 参数 -f 强制删除  docker rmi -f [镜像名称/镜像ID]</span><br><span class="line">		--&gt; 注意: 在删除镜像的时候最好先将容器(下面介绍)删除,否则可能删除失败</span><br><span class="line">6. 运行镜像</span><br><span class="line">	--&gt; docker run [参数][镜像ID/镜像名称]</span><br><span class="line">		--&gt; 启动一个centos容器并且后台运行: docker run -itd --name=&quot;c01&quot; centos /bin/bash</span><br><span class="line">			--&gt; -d 参数: 后台运行</span><br><span class="line">			--&gt; -i 参数: 以交互模式运行</span><br><span class="line">			--&gt; -t 参数: 为容器分配一个伪终端,常与-i参数一起搭配使用</span><br><span class="line">			--&gt; /bin/bash 参数: docker运行一个容器之后,必须保持这个容器里面的任意一个进程运行,否则容器就会在启动之后被杀死,/bin/bash就表示启动容器后启动bash</span><br><span class="line">			--&gt; -p 参数: 映射端口号,将容器内的应用的端口号映射到宿主机的端口号</span><br><span class="line">			--&gt; --name 参数: 自定义容器名称</span><br><span class="line"></span><br><span class="line">7. 查看容器</span><br><span class="line">	--&gt; 查看当前正在运行的容器: docker ps </span><br><span class="line">		--&gt; -a 参数: 查看当前所有的容器(已运行和未运行) docker ps -a</span><br><span class="line">		</span><br><span class="line">		CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">        b0faa3079666   centos    &quot;/bin/bash&quot;   16 minutes ago   Up 16 minutes             confident_cannon</span><br><span class="line">        94eb3d8db458   centos    &quot;/bin/bash&quot;   17 minutes ago   Up 17 minutes             gallant_blackwell</span><br><span class="line">        5db82b03c4e5   centos    &quot;/bin/bash&quot;   17 minutes ago   Up 17 minutes             festive_knuth</span><br><span class="line">		</span><br><span class="line">		--&gt; CONTAINER ID:容器ID</span><br><span class="line">		--&gt; IMAGE: 镜像</span><br><span class="line">		--&gt; COMMAND: 启动容器时运行的命令</span><br><span class="line">		--&gt; CREATED: 容器的创建时间</span><br><span class="line">		--&gt; STATUS: 容器的运行状态</span><br><span class="line">		--&gt; PORTS: 容器运行映射的端口号</span><br><span class="line">		--&gt; NAMES: 容器的名称(如果不设置会自动分配)</span><br><span class="line">	</span><br><span class="line">8. 进入已运行的容(容器必须开启交互模式)</span><br><span class="line">	--&gt; 方式一: docker attach [容器ID]</span><br><span class="line">	--&gt; 方式二: docker exec -it [容器ID] /bin/bash</span><br><span class="line">9. 从已经进入的容器中退出到宿主机</span><br><span class="line">	--&gt; 方式一 exit : 退出后容器被停止（用attach进入的容器才会停止）</span><br><span class="line">	--&gt; 方式二 Ctrl+d : 退出后容器被停止</span><br><span class="line">	--&gt; 方式三 Ctrl+p 和 Ctrl+q : 先按Ctrl+p在按Ctrl+q,退出后容器不会停止</span><br><span class="line">10. 启动容器/停止/重启</span><br><span class="line">	--&gt; 启动容器: docker start [容器ID]</span><br><span class="line">	--&gt; 重启容器: docker restart [容器ID]</span><br><span class="line">	--&gt; 停止容器: docker stop [容器ID]</span><br><span class="line">	--&gt; 停止全部容器: docker stop $(docker ps -q)</span><br><span class="line">11. 删除容器</span><br><span class="line">	--&gt; docker rm [容器ID/容器名称]  删除单个已经停止的容器</span><br><span class="line">	--&gt; docker rm $(docker ps -aq) 删除全部已停止的容器</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第四章-Docker-运行命令的详细介绍"><a href="#第四章-Docker-运行命令的详细介绍" class="headerlink" title="第四章 Docker 运行命令的详细介绍"></a>第四章 Docker 运行命令的详细介绍</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker运行(run)命令的详细介绍,使用tomcat镜像作为例子演示</span><br><span class="line"></span><br><span class="line">1. 拉取tomcat镜像</span><br><span class="line">	--&gt; docker pull tomcat</span><br><span class="line">2. 运行tomcat(在运行之后首先将宿主机的防火墙关闭,或者是开启8080端口)</span><br><span class="line">	--&gt; docker run -p[主机端口号]:[容器端口号] -v [主机目录]:[容器目录] tomcat</span><br><span class="line">	</span><br><span class="line">		eg: docker run --name=&quot;tomcat001&quot; -d -p 8080:8080 -v /home/hs/web:/usr/local/tomcat/webapps/ tomcat</span><br><span class="line">			</span><br><span class="line">			--name: 给运行的容器起一个名字</span><br><span class="line">			-d    : 后台运行</span><br><span class="line">			-p    : 将宿主机的端口号和容器的端口号想关联</span><br><span class="line">			-v    : 挂载卷,将容器内的某一个目录挂载到宿主机的某一个目录上,可以实现容器和宿主机的数据共享</span><br><span class="line">				-- v mydata:/data    冒号左侧是宿主机地址,冒号右侧是容器内地址</span><br><span class="line">				</span><br><span class="line">				上面的例子-v的意思就是将宿主机/home/hs/web目录的文件共享到容器内部的/usr/local/tomcat/webapps/目录下</span><br><span class="line">				比如在/home/hs/web目录下放一个war包项目,就会共享到/usr/local/tomcat/webapps/目录下</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第五章-Docker自定义构建镜像"><a href="#第五章-Docker自定义构建镜像" class="headerlink" title="第五章 Docker自定义构建镜像"></a>第五章 Docker自定义构建镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 为什么要自己构建镜像文件</span><br><span class="line">	-&gt; 因为有的时候我们需要的镜像官方不一定有,或者我们需要的镜像功能比较多,官方提供的镜像功能不完善...</span><br><span class="line">2. 怎么自定义一个镜像文件</span><br><span class="line">	-&gt; Docker提供了Dockerfile方式进行镜像的构建</span><br></pre></td></tr></table></figure>

<h3 id="第1节-Dockerfile-是什么"><a href="#第1节-Dockerfile-是什么" class="headerlink" title="第1节 Dockerfile 是什么"></a>第1节 Dockerfile 是什么</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Dockerfile官网地址:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.docker.com/engine/reference/builder/</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第2节-Dockerfile的使用"><a href="#第2节-Dockerfile的使用" class="headerlink" title="第2节 Dockerfile的使用"></a>第2节 Dockerfile的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用docker build命令通过Dockerfile构建镜像,构建可以通过本地路径(PATH)或者是网络路径(URL)构建,本地路径是一个本地文件系统,网络路径是一个GIT仓库地址</span><br><span class="line"></span><br><span class="line">~$ docker build .  //传统方式</span><br><span class="line">~$ docker build -f /path/to/a/Dockerfile . //采用-f参数指定构建哪一个Dockerfile文件</span><br><span class="line">~$ docker build -t fqyb/myapp .   //构建完成之后指定一个仓库和标签 -t参数设置新镜像的仓库和标签</span><br><span class="line">~$ docker build -t fqyb/myapp:1.0.0 -t fqyb/myapp:latest .  //如果构建完成之后添加到多个仓库可以添加多个-t参数</span><br></pre></td></tr></table></figure>

<h4 id="2-1-Dockerfile常用命令"><a href="#2-1-Dockerfile常用命令" class="headerlink" title="2.1 Dockerfile常用命令"></a>2.1 Dockerfile常用命令</h4><ul>
<li>FROM</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: FROM [&lt;image&gt;] 或者 FROM [&lt;image&gt;:&lt;tag&gt;]</span><br><span class="line"></span><br><span class="line">第一条指令必须是FROM，而且,在同一个Dockerfile中创建多个镜像的时候,可以使用多个FROM指令</span><br></pre></td></tr></table></figure>

<ul>
<li>RUN</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: RUN &lt;command&gt; 或者 RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line"></span><br><span class="line">执行一个shell脚本</span><br><span class="line"></span><br><span class="line">eg: RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>ENV</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line">就是指定一个环境变量，会被后续的RUN命令使用，并在容器运行时保持</span><br><span class="line"></span><br><span class="line"> eg: </span><br><span class="line"> ENV MYSQL_VERSION 5.6</span><br><span class="line"> RUN curl -SL &quot;http://dev.mysql.com/get/Downloads/MySQL-$MYSQL_VERSION/mysql-$MYSQL_VERSION-linux-glibc2.5-x86_64.tar.gz&quot; -o mysql.tar.gz</span><br><span class="line"> </span><br><span class="line"> 可以使用$MYSQL_VERSION变量名获取后面的值5.6</span><br></pre></td></tr></table></figure>

<ul>
<li>COPY</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: COPY &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">复制本地主机的&lt;src&gt;为容器的&lt;dest&gt;，目标路径不存在的时候，会自动创建</span><br></pre></td></tr></table></figure>

<ul>
<li>ADD</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: ADD &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">复制指定的&lt;src&gt;到容器的&lt;dest&gt;，其中&lt;src&gt;可以是Dockerfile所在目录的一个相对路径（文件或目录）;也可以是一个URL;还可以是一个tar文件（自动解压为目录）</span><br></pre></td></tr></table></figure>

<ul>
<li>EXPOSE</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line"></span><br><span class="line">这条命令告诉容器需要开放的端口号，以提供给互联系统使用，启动容器的时候需要通过-p或者-P来分配这些端口</span><br><span class="line"></span><br><span class="line">eg: EXPOSE 80 443 22 8080   </span><br><span class="line">eg: docker run -d -p 1022:22 -p 1080:80 -p 1443:443 nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>USER</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: USER daemon</span><br><span class="line"></span><br><span class="line">指定运行容器时候的用户名或者UID，后续RUN也会使用指定的用户</span><br></pre></td></tr></table></figure>

<ul>
<li>WORKDIR</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: WORKDIR /path/to/workdir</span><br><span class="line"></span><br><span class="line">由于Dockerfile中不能使用cd命令，所以我们想要在哪个目录下操作的时候就需要切换进来。为后续的RUN，CMD以及ENTRYPOINT指定工作的目录</span><br><span class="line">可以使用多个WORKDIR命令，如果后面为相对路径，则是针对当前目录确定的</span><br><span class="line"></span><br><span class="line">WORKDIR /x</span><br><span class="line">WORKDIR y</span><br><span class="line">WORKDIR z</span><br><span class="line">最后进入的目录就是 /x/y/z   /x为根目录  y相对于x目录    z相对于y目录  所以最后就是/x/y/z</span><br></pre></td></tr></table></figure>

<ul>
<li>CMD</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: </span><br><span class="line">1. CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]使用exec执行，推荐方式。</span><br><span class="line">2. CMD command param1 param2在/bin/sh中执行，提供给需要交互的应用。</span><br><span class="line">3. CMD [&quot;param1&quot;, &quot;param2&quot;]提供给ENTRYPOINT的默认参数。</span><br><span class="line"></span><br><span class="line">指定启动容器时执行的命令，每一个Dockerfile只能有一条CMD命令，如果有多条的话，只会执行最后一条。如果用户启动容器时指定了运行的命令，则CMD命令会被覆盖掉</span><br></pre></td></tr></table></figure>

<ul>
<li>ENTRYPOINT</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]或ENTRYPOINT command param1 param2（shell中执行）</span><br><span class="line"></span><br><span class="line">配置容器启动以后执行的命令，并且不能被docker run命令提供的参数覆盖。每一个Dockerfile只能有一个ENTRYPOINT命令，当存在多个的时候就只有最后一个会生效</span><br></pre></td></tr></table></figure>

<ul>
<li>VOLUME</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: VOLUME [&quot;/data&quot;]</span><br><span class="line"></span><br><span class="line">Docker容器是基于镜像创建的,在容器运行的时候可能产生一些数据,比如说运行一个MYSQL的容器,这时候会在容器中写入很多数据,如果我们将容器删除,那么整个数据库里面的数据都会被删除.</span><br><span class="line">有没有一种方式可以将容器中产生的数据,保存到宿主机上,这样即便容器被删除,但是我们的数据还在.这个VOLUME属性就可以帮我们实现.</span><br><span class="line">在我们运行Docker容器时候使用 -v参数可以将VOLUME设置的参数映射到宿主机上</span><br></pre></td></tr></table></figure>

<ul>
<li>LABEL</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: LABEL maintainer=&quot;SvenDowideit@home.org.au&quot;</span><br><span class="line"></span><br><span class="line">代替MAINTAINER属性,LABEL设置更灵活</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-2-Dockerfile命令使用"><a href="#2-2-Dockerfile命令使用" class="headerlink" title="2.2 Dockerfile命令使用"></a>2.2 Dockerfile命令使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个Dockerfile文件(文件名称叫做Dockerfile,没有后缀名)</span><br><span class="line">2. 写一个简单的入门的Dockerfile文件</span><br><span class="line">eg: 自定义一个内置tomcat的镜像(tomcat和基础镜像自己准备)</span><br><span class="line"></span><br><span class="line"># 基础镜像</span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line"># 作者信息</span><br><span class="line">LABEL &quot;Author&quot;=&quot;夜泊1990&quot;</span><br><span class="line"></span><br><span class="line"># 将tomcat文件复制到容器的指定位置</span><br><span class="line">COPY ./tomcat  /usr/local/tomcat</span><br><span class="line"></span><br><span class="line"># 将jdk文件复制到容器的指定位置</span><br><span class="line">COPY ./jdk /usr/local/jdk</span><br><span class="line"></span><br><span class="line"># 配置镜像内部JDK的环境变量</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"># 指定镜像端口号</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 运行镜像时执行的命令</span><br><span class="line">ENTRYPOINT /usr/local/tomcat/bin/startup.sh &amp;&amp; tail -f /usr/local/tomcat/logs/catalina.out</span><br><span class="line"></span><br><span class="line">3. docker build -t hs/tomcat:v1.0 .</span><br><span class="line">4. 运行: docker run --name=&quot;app001&quot; -d -p 8080:8080 -v /home/hs/web:/usr/local/tomcat/webapps/ hs/tomcat:v1.0</span><br><span class="line">5. 访问: http://192.168.130.128:8080/demo/</span><br></pre></td></tr></table></figure>

<h3 id="第3节-Docker-Compose"><a href="#第3节-Docker-Compose" class="headerlink" title="第3节 Docker Compose"></a>第3节 Docker Compose</h3><ul>
<li>官网地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.docker.com/compose/</span><br></pre></td></tr></table></figure>

<ul>
<li>注意</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为Compose只能在单主机上面进行多容器部署,不能在多主机进行容器部署,所以现在基本上都是用K8S进行操作,Compose在跨主机部署中使用较少</span><br></pre></td></tr></table></figure>

<h4 id="3-1-Compose-介绍"><a href="#3-1-Compose-介绍" class="headerlink" title="3.1 Compose 介绍"></a>3.1 Compose 介绍</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Compose 是一个可以定义和运行多个docker容器应用的工具,它使用一个YAML文件配置你的应用服务,并且使用一个命令就可以创建和启动配置里面的所有服务.</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Compose-安装"><a href="#3-2-Compose-安装" class="headerlink" title="3.2 Compose 安装"></a>3.2 Compose 安装</h4><ul>
<li>系统需求</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 首先Linux系统上面要安装了Docker引擎</span><br><span class="line">2. 运行Compose 最好是以一个非root用户运行</span><br><span class="line"></span><br><span class="line">创建Linux新用户,并且添加群组</span><br><span class="line">--&gt; 创建群组 groupadd dockerCompose</span><br><span class="line">--&gt; 创建用户并添加进群组 useradd dockerCompose -m -s /bin/false -d /home/dockerCompose -g dockerCompose</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装步骤</p>
</li>
<li><ul>
<li>下载Compose</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<ul>
<li>给Compose执行权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<ul>
<li>设置软连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>

<ul>
<li>查看Compose版本号</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure></li>
<li><p>注意事项</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在下载Compose时，可能会因为网络原因造成下载失败,可以去github上面直接下载源文件然后上传到服务器的/usr/local/bin 目录下即可,如果下载的文件名字不叫docker-compose 可以使用mv命令重新命名为docker-compose</span><br></pre></td></tr></table></figure>

<h4 id="3-3-Compose-使用"><a href="#3-3-Compose-使用" class="headerlink" title="3.3 Compose 使用"></a>3.3 Compose 使用</h4><h5 id="3-3-1-使用Compose部署一个web服务器"><a href="#3-3-1-使用Compose部署一个web服务器" class="headerlink" title="3.3.1 使用Compose部署一个web服务器"></a>3.3.1 使用Compose部署一个web服务器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个名为docker-compose.yml文件</span><br><span class="line">2. 创建一个Dockerfile文件,docker-compose.yml基于Dockerfile运行(也可以不基于)</span><br><span class="line">3. 准备Dockerfile文件和一个war包作为测试</span><br><span class="line"></span><br><span class="line">	# 选择镜像</span><br><span class="line">	from tomcat</span><br><span class="line">	# 作者信息</span><br><span class="line">    LABEL  &quot;AUTHOR&quot;=&quot;夜泊&quot;</span><br><span class="line">    # 将测试的web项目部署到tomcat的webapp目录下</span><br><span class="line">    COPY ./web.war   /usr/local/tomcat/webapps</span><br><span class="line"></span><br><span class="line">4. 准备docker-compose.yml文件</span><br><span class="line"></span><br><span class="line">version: &quot;2.0&quot; # 版本,一般为2或者3版本</span><br><span class="line">services:      # 服务器</span><br><span class="line">    web:      # 服务器标记名称,名字自定义,为了区分services下的多个服务</span><br><span class="line">    	build: .    # 构建当前根目录下的Dockerfile文件</span><br><span class="line">    	container_name: &#x27;app01&#x27;   # 给启动的容器起名字</span><br><span class="line">    	ports:                    # 设置容器的宿主机的端口号映射,左侧为宿主机,右侧为容器</span><br><span class="line">    		- 8081:8080</span><br><span class="line">         </span><br><span class="line">5. 在当前目录下敲击此命令启动服务: docker-compose up  如果后面带有 -d参数直接后台运行 docker-compose up -d</span><br><span class="line">6. 宿主机浏览器访问 http://192.168.142.128:8081/web/</span><br><span class="line">7. 查看容器的实时日志 docker logs -f 容器ID/容器名称</span><br></pre></td></tr></table></figure>

<h5 id="3-3-2-使用Compose部署两个web服务器"><a href="#3-3-2-使用Compose部署两个web服务器" class="headerlink" title="3.3.2 使用Compose部署两个web服务器"></a>3.3.2 使用Compose部署两个web服务器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个名为docker-compose.yml文件</span><br><span class="line">2. 创建一个Dockerfile文件,docker-compose.yml基于Dockerfile运行(也可以不基于)</span><br><span class="line">3. 准备Dockerfile文件和一个war包作为测试</span><br><span class="line"></span><br><span class="line">	# 选择镜像</span><br><span class="line">	from tomcat</span><br><span class="line">	# 作者信息</span><br><span class="line">    LABEL  &quot;AUTHOR&quot;=&quot;夜泊&quot;</span><br><span class="line">    # 将测试的web项目部署到tomcat的webapp目录下</span><br><span class="line">    COPY ./web.war   /usr/local/tomcat/webapps</span><br><span class="line"></span><br><span class="line">4. 准备docker-compose.yml文件</span><br><span class="line"></span><br><span class="line">version: &quot;2.0&quot; # 版本,一般为2或者3版本</span><br><span class="line">services:      # 服务器</span><br><span class="line">    web1:      # 服务器标记名称,名字自定义,为了区分services下的多个服务</span><br><span class="line">    	build: .    # 构建当前根目录下的Dockerfile文件</span><br><span class="line">    	container_name: &#x27;app01&#x27;   # 给启动的容器起名字</span><br><span class="line">    	ports:                    # 设置容器的宿主机的端口号映射,左侧为宿主机,右侧为容器</span><br><span class="line">    		- 8081:8080</span><br><span class="line">    web2:      # 服务器标记名称,名字自定义,为了区分services下的多个服务</span><br><span class="line">    	build: .    # 构建当前根目录下的Dockerfile文件</span><br><span class="line">    	container_name: &#x27;app02&#x27;   # 给启动的容器起名字</span><br><span class="line">    	ports:                    # 设置容器的宿主机的端口号映射,左侧为宿主机,右侧为容器</span><br><span class="line">    		- 8082:8080</span><br><span class="line">         </span><br><span class="line">5. 在当前目录下敲击此命令启动服务: docker-compose up  如果后面带有 -d参数直接后台运行 docker-compose up -d</span><br><span class="line">6. 宿主机浏览器访问 </span><br><span class="line">	-&gt; http://192.168.142.128:8081/web/</span><br><span class="line">	-&gt; http://192.168.142.128:8082/web/</span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-使用Compose部署两个web服务器"><a href="#3-3-3-使用Compose部署两个web服务器" class="headerlink" title="3.3.3 使用Compose部署两个web服务器"></a>3.3.3 使用Compose部署两个web服务器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相比于3.3.2 </span><br><span class="line">3.3.2 缺点: </span><br><span class="line">	1. web1服务build构建Dockerfile生成一个新镜像,并且运行起来</span><br><span class="line">	2. web2服务也build构建Dockerfile生成另一个镜像,并且运行起来,缺点就是构建同一个Dockerfile,生成同一个镜像,毫无意义</span><br><span class="line">3.3.3 对3.3.2的docker-compose.yml进行了修改</span><br><span class="line"></span><br><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">    web1:</span><br><span class="line">        build: .</span><br><span class="line">        image: &quot;web:1.0&quot;    # build构建Dockerfile时,生成镜像的镜像仓库名称和TAG版本</span><br><span class="line">        container_name: &#x27;app01&#x27;  # 给启动的容器起名字</span><br><span class="line">        ports:</span><br><span class="line">            - 8081:8080          # 端口号映射,冒号左侧是宿主机,冒号右侧是容器</span><br><span class="line">    web2:</span><br><span class="line">        image: &quot;web:1.0&quot;    # 第二个服务使用第一个镜像,不在重新构建</span><br><span class="line">        container_name: &#x27;app02&#x27;</span><br><span class="line">        ports:</span><br><span class="line">            - 8082:8080</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第六章-Docker-仓库"><a href="#第六章-Docker-仓库" class="headerlink" title="第六章 Docker 仓库"></a>第六章 Docker 仓库</h2><h3 id="第1节-Docker默认的官方仓库"><a href="#第1节-Docker默认的官方仓库" class="headerlink" title="第1节 Docker默认的官方仓库"></a>第1节 Docker默认的官方仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目前Docker官方维护了一个公共仓库叫做Docker Hub,很多的公共镜像都会发布到Docker Hub中进行共享</span><br><span class="line">我们pull的镜像默认来自于Docker Hub,我们也可以去Docker Hub上面去注册账号,然后将自己构建的镜像发布到Docker Hub中</span><br><span class="line">Docker Hub有点类似于我们的github仓库或者gitee仓库,就是一个存储镜像,一个存储代码.</span><br></pre></td></tr></table></figure>

<ul>
<li>Docker Hub的地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://registry.hub.docker.com/</span><br></pre></td></tr></table></figure>

<ul>
<li>注册(略)</li>
</ul>
<h3 id="第2节-DockerHub仓库数据推送"><a href="#第2节-DockerHub仓库数据推送" class="headerlink" title="第2节 DockerHub仓库数据推送"></a>第2节 DockerHub仓库数据推送</h3><h4 id="2-1-登录-登出"><a href="#2-1-登录-登出" class="headerlink" title="2.1 登录/登出"></a>2.1 登录/登出</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 登录 docker login</span><br><span class="line">	--&gt; 登陆成功</span><br><span class="line">        Configure a credential helper to remove this warning. See</span><br><span class="line">        https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">        Login Succeeded</span><br><span class="line"></span><br><span class="line">2. 登出 docker logout</span><br><span class="line">	--&gt; 登出</span><br><span class="line">		Removing login credentials for https://index.docker.io/v1/</span><br></pre></td></tr></table></figure>

<h4 id="2-2-推送镜像"><a href="#2-2-推送镜像" class="headerlink" title="2.2 推送镜像"></a>2.2 推送镜像</h4><ul>
<li>镜像的命名规范</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">镜像名称命名: dockerhub的登录名/镜像的名称:tag</span><br><span class="line">如果要推送的镜像名字不符合规范可以使用docker tag命令进行重新命名</span><br><span class="line">eg: </span><br><span class="line">	1611756908/compose_web1:latest     ----&gt; 符合规范的名字</span><br><span class="line">	1611756908  : dockerhub账户名称</span><br><span class="line">	compose_web1: 仓库名称</span><br><span class="line">	latest      : TAG</span><br><span class="line">	compose_web1:latest                ----&gt; 不符合规范的名字</span><br><span class="line">	使用命令修改  docker tag compose_web1 1611756908/compose_web1</span><br><span class="line">	</span><br><span class="line">源镜像: docker images</span><br><span class="line"></span><br><span class="line">    REPOSITORY     TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">    compose_web1   latest    7a8befb5f963   6 minutes ago   649MB</span><br><span class="line">    compose_web2   latest    7a8befb5f963   6 minutes ago   649MB</span><br><span class="line">    tomcat         latest    040bdb29ab37   8 days ago      649MB</span><br><span class="line"></span><br><span class="line">修改之后的镜像: docker images</span><br><span class="line"></span><br><span class="line">    REPOSITORY                TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">    1611756908/compose_web1   latest    7a8befb5f963   9 minutes ago   649MB</span><br><span class="line">    compose_web1              latest    7a8befb5f963   9 minutes ago   649MB</span><br><span class="line">    compose_web2              latest    7a8befb5f963   9 minutes ago   649MB</span><br><span class="line">    tomcat                    latest    040bdb29ab37   8 days ago      649MB</span><br></pre></td></tr></table></figure>

<ul>
<li>推送</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用docker push命令进行推送</span><br><span class="line"></span><br><span class="line">docker push 1611756908/compose_web1:latest</span><br><span class="line"></span><br><span class="line">注意: 推送时使用 REPOSITORY + TAG 方式</span><br></pre></td></tr></table></figure>

<ul>
<li>登录dockerhub查看</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在进行docker push 时 可能会push多次失败的情况,重试多次即可</span><br><span class="line"></span><br><span class="line">可以将本地镜像删除,然后使用pull命令,拉取我们推送到dockerhub上的镜像</span><br><span class="line">docker pull 1611756908/compose_web1</span><br></pre></td></tr></table></figure>

<p><img src="/img/Docker/dockerhub.png" alt="dockerhub" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="第3节-搭建本地的Docker仓库"><a href="#第3节-搭建本地的Docker仓库" class="headerlink" title="第3节 搭建本地的Docker仓库"></a>第3节 搭建本地的Docker仓库</h3><h4 id="2-1-registry库"><a href="#2-1-registry库" class="headerlink" title="2.1 registry库"></a>2.1 registry库</h4><ul>
<li>搭建</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 从远程仓库拉取registry镜像</span><br><span class="line">	-&gt; docker pull registry</span><br><span class="line">2. 运行registry镜像</span><br><span class="line">	-&gt; docker run -d -v /home/hs/registry:/var/lib/registry -p 5000:5000 --name myregistry registry</span><br><span class="line">	-v命令将registry容器内保存镜像的数据挂载到宿主机的/home/hs/registry目录下</span><br><span class="line">3. 访问</span><br><span class="line">	-&gt; http://192.168.130.128:5000/v2/</span><br></pre></td></tr></table></figure>

<ul>
<li>展示</li>
</ul>
<p><img src="/img/Docker/docker.png" alt="docker" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li> 向 registry 库推送镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">推送镜像的方式和DockerHub推送差不多,只是相比于dockerhub他多了一个registry库地址</span><br><span class="line"></span><br><span class="line">我在宿主机上面向registry推送数据,由于宿主机和registry在一台机器上面所以IP地址为127.0.0.1或者localhost,如果不在换成其他IP地址即可</span><br><span class="line">相比于dockerhub仓库registry仓库不需要认证(登录操作),所以在给镜像起名字时不需要类似于dockerhub的账号</span><br><span class="line">eg(修改名字):</span><br><span class="line">	docker tag compose_web1:latest localhost:5000/compose_web:latest</span><br><span class="line">	</span><br><span class="line">源镜像: docker images</span><br><span class="line"></span><br><span class="line">    REPOSITORY     TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">    compose_web1   latest    90c23a219728   40 seconds ago   649MB</span><br><span class="line">    compose_web2   latest    90c23a219728   40 seconds ago   649MB</span><br><span class="line">    tomcat         latest    040bdb29ab37   8 days ago       649MB</span><br><span class="line">    registry       latest    678dfa38fcfa   5 weeks ago      26.2MB</span><br><span class="line"></span><br><span class="line">修改之后的镜像: docker images</span><br><span class="line"></span><br><span class="line">    compose_web1                 latest    90c23a219728   About a minute ago   649MB</span><br><span class="line">    compose_web2                 latest    90c23a219728   About a minute ago   649MB</span><br><span class="line">    localhost:5000/compose_web   latest    90c23a219728   About a minute ago   649MB</span><br><span class="line">    tomcat                       latest    040bdb29ab37   8 days ago           649MB</span><br><span class="line">    registry                     latest    678dfa38fcfa   5 weeks ago          26.2MB</span><br><span class="line">    </span><br><span class="line">推送</span><br><span class="line">	--&gt; docker push localhost:5000/compose_web:latest</span><br><span class="line"></span><br><span class="line">推送成功</span><br><span class="line">	</span><br><span class="line">	The push refers to repository [localhost:5000/compose_web]</span><br><span class="line">    7423f9f18aa9: Pushed </span><br><span class="line">    9ddc8cd8299b: Pushed </span><br><span class="line">    c9132b9a3fc8: Pushed </span><br><span class="line">    8e2e6f2527c7: Pushed </span><br><span class="line">    500f722b156b: Pushed </span><br><span class="line">    7a9b35031285: Pushed </span><br><span class="line">    7496c5e8691b: Pushed </span><br><span class="line">    aa7af8a465c6: Pushed </span><br><span class="line">    ef9a7b8862f4: Pushed </span><br><span class="line">    a1f2f42922b1: Pushed </span><br><span class="line">    4762552ad7d8: Pushed </span><br><span class="line">    latest: digest: sha256:537422d34cfba4ff7d2f22076c332dd76f263e45b68cd09af3c6e7efd236c9ad size: 2628</span><br><span class="line">	</span><br><span class="line">浏览器访问:</span><br><span class="line">	--&gt; http://192.168.142.128:5000/v2/_catalog</span><br></pre></td></tr></table></figure>



<ul>
<li>从registry 库拉取镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull localhost:5000/compose_web:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>注意</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry 仓库用起来简单,但是管理功能不足,所以不建议使用.</span><br></pre></td></tr></table></figure>

<h4 id="2-2-harbor库"><a href="#2-2-harbor库" class="headerlink" title="2.2 harbor库"></a>2.2 harbor库</h4><blockquote>
<p>Harbor 是由 VMware 公司中国团队为企业用户设计的 Registry server 开源项目，包括了权限管理(RBAC)、LDAP、审计、管理界面、自我注册、HA 等企业必需的功能，同时针对中国用户的特点，设计镜像复制和中文支持等功能,据说升级之后有问题,这里不做介绍</p>
</blockquote>
<h4 id="2-3-nexus-存储Docker镜像"><a href="#2-3-nexus-存储Docker镜像" class="headerlink" title="2.3 nexus 存储Docker镜像"></a>2.3 nexus 存储Docker镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nexus大家都比较熟悉是我们的maven私服搭建的软件,nexus从3版本开始支持了docker镜像仓库,很多企业的docker的镜像仓库都以nexus为主,直接使用docker pull/push 拉/推镜像即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令:</span><br><span class="line">docker run -d --restart=always -p 8081:8081 -p 8086:8086 --name nexus -v /home/hs/nexus-data:/nexus-data sonatype/nexus3</span><br><span class="line"></span><br><span class="line">/home/hs/nexus-data : 此目录结构需要权限 chmod 777 /home/hs/nexus-data  即可</span><br><span class="line"></span><br><span class="line">查看日志 docker logs [容器ID]</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line"></span><br><span class="line">Started Sonatype Nexus OSS 3.29.2-02</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">打印出以上显示为启动完成</span><br><span class="line"></span><br><span class="line">浏览器登录</span><br><span class="line">http://192.168.142.128:8081/</span><br><span class="line"></span><br><span class="line">默认用户名密码为 admin/admin123</span><br><span class="line">但是有的时候这个用户密码是不对的,如果显示密码不对,那么使用命令进入容器</span><br><span class="line">1. 进入容器</span><br><span class="line"> docker exec -it nexus /bin/bash</span><br><span class="line">2. 进入/opt/sonatype/sonatype-work/nexus3目录下,找到admin.password文件，里面的内容就是密码</span><br><span class="line"></span><br><span class="line">3. 这个密码是临时密码,使用此密码登录完后就会消失.</span><br></pre></td></tr></table></figure>

<h4 id="2-3-1-配置nexus的docker镜像仓库"><a href="#2-3-1-配置nexus的docker镜像仓库" class="headerlink" title="2.3.1 配置nexus的docker镜像仓库"></a>2.3.1 配置nexus的docker镜像仓库</h4><ul>
<li>在nexus操作界面创建docker镜像仓库</li>
</ul>
<p><img src="/img/Docker/d1.png" alt="d1" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Docker/2.png" alt="2" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Docker/3.png" alt="3" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Docker/5.png" alt="5" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>设置docker的realm</li>
</ul>
<p><img src="/img/Docker/6.png" alt="6" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Docker/7.png" alt="7" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/Docker/8.png" alt="8" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>使用docker命令在命令行登录nexus的docker仓库</p>
</li>
<li><ul>
<li>配置docker服务</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在/etc/docker的daemon.json中添加一行&quot;insecure-registries&quot;:[&quot;127.0.0.1:8086&quot;]</span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;],</span><br><span class="line"> &quot;insecure-registries&quot;:[&quot;127.0.0.1:8086&quot;]</span><br><span class="line">&#125;</span><br><span class="line">//配置完成重新启动docker服务以及nexus容器,一般情况重启docker服务容器会自动重启</span><br><span class="line">systemctl daemon-reload   //重新加载守护进程</span><br><span class="line">systemctl restart docker  //重启docker</span><br></pre></td></tr></table></figure>

<ul>
<li>执行登录/登出命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录:</span><br><span class="line">docker login 127.0.0.1:8086</span><br><span class="line">登出:</span><br><span class="line">docker logout 127.0.0.1:8086</span><br></pre></td></tr></table></figure></li>
<li><p>将本地镜像推送到nexus中的docker仓库</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 先将要上传的镜像打标记,或者叫起名字上面已经介绍过</span><br><span class="line">	docker tag registry:latest 127.0.0.1:8086/registry:latest</span><br><span class="line">2. 修改完名字之后,需要执行登录命令</span><br><span class="line">	docker login 127.0.0.1:8086</span><br><span class="line">3. 推送</span><br><span class="line">	docker push 127.0.0.1:8086/registry:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>从远程的nexus中拉取镜像到本地</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 127.0.0.1:8086/registry:latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>完成,以上就是docker的快速入门…de1</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>JS</title>
    <url>/2023/03/31/JS/</url>
    <content><![CDATA[<h1 id="编辑中…………"><a href="#编辑中…………" class="headerlink" title="编辑中…………."></a>编辑中………….</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2023/03/31/Java/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2023/03/31/JavaWeb/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Linux安装使用以及常见命令</title>
    <url>/2023/03/29/Linux/</url>
    <content><![CDATA[<p><img src="/img/Linux/1586185429977.png" alt="1586185429977" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>Author：Eric</p>
<p>Version：9.0.1</p>
</blockquote>
<p>[TOC]</p>
<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr>
<h4 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1 开发环境"></a>1.1 开发环境</h4><blockquote>
<p>平时大家大多是在Windows或者Mac操作系统下去编写代码进行开发，在开发环境中安装大量的软件，这样会导致环境的稳定性和安全性降低</p>
</blockquote>
<h4 id="1-2-生产环境"><a href="#1-2-生产环境" class="headerlink" title="1.2 生产环境"></a>1.2 生产环境</h4><blockquote>
<p>是将程序运行在此环境中，供用户去使用。这个环境是有专业的人员去维护，一般人是没有权限去操做生产环境的</p>
</blockquote>
<h4 id="1-3-测试环境"><a href="#1-3-测试环境" class="headerlink" title="1.3 测试环境"></a>1.3 测试环境</h4><blockquote>
<p>一般克隆一份生产环境，会将开发环境中的程序部署到测试环境中，这个环境的主要目的是去程序进程检测，收集程序中的各种问题，并交给开发人员进行修改</p>
</blockquote>
<h4 id="1-4-操作系统的选择"><a href="#1-4-操作系统的选择" class="headerlink" title="1.4 操作系统的选择"></a>1.4 操作系统的选择</h4><blockquote>
<p>生产环境中，常用的操作系统有Windows 2003 service，Linux，Unix等等，Linux操作系统，在生产环境中占据了大量的市场份额，Linux主要以稳定，可靠，免费的特点成为全球使用最多的服务器操作系统。</p>
<p>Linux操作系统现在已经成为后台开发人员必备的技能，并且后期学习的各种知识都会涉及到Linux操作系统。</p>
</blockquote>
<h3 id="二、Linux介绍"><a href="#二、Linux介绍" class="headerlink" title="二、Linux介绍"></a>二、Linux介绍</h3><hr>
<h4 id="2-1-Linux介绍"><a href="#2-1-Linux介绍" class="headerlink" title="2.1 Linux介绍"></a>2.1 Linux介绍</h4><blockquote>
<p>在Linux操作系统出现之前，还有一个操作系统叫做Minix，Minix操作系统是由Andrew的大学教授研发出来的，当时大学教授是为了给学生上课，买了一套Unix操作系统，参考Unix自己写了一个操作系统，并且命名为Minix。同时将Minix开源，供学校内部的研究和教学，到了2000年，Andrew将Minix操作系统完全对外开源。</p>
<p>Minix由于完全对外开源之后，在互联网上迅速的传播，但是大家在使用时，发展Minix不时很完美，内部存在各种各样问题。用户将问题解决后，编写了一个补丁，将补丁以邮件的方式发给Andrew，但是Andrew教授最初的目的只是为了教学和研究。</p>
<p>于此同时，一位芬兰的大学生出现了，叫Linus，在Minix操作系统基础上，自己添加了一些补丁和插件，并将其命名为Linux操作系统，并且完全对外开源，而且开始维护Linux操作系统。</p>
<p>之前学习的Git也时Linus研发的。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linus Torvalds 和 Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586225837185.png" alt="1586225837185" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h4 id="2-2-Linux的版本"><a href="#2-2-Linux的版本" class="headerlink" title="2.2 Linux的版本"></a>2.2 Linux的版本</h4><blockquote>
<p>Linux的版本分为两种，一种是Linus团队正在维护的开源内核版本。另一种是一些厂商基于内核版本封装的发行版本。</p>
<ul>
<li><p>Linux的内核版本官网：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
</li>
<li><p>Linux的发行版本，咱们需要学习的发行版本就时CentOS</p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linux的常见发行版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586227096086.png" alt="1586227096086" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h4 id="2-3-Linux和Windows区别"><a href="#2-3-Linux和Windows区别" class="headerlink" title="2.3 Linux和Windows区别"></a>2.3 Linux和Windows区别</h4><blockquote>
<ul>
<li>Linux是严格区分大小写的，Windows无所谓。</li>
<li>Linux中一切皆是文件。</li>
<li>Linux中文件是没有后缀的，但是他有一些约定俗成的后缀。</li>
<li>Windows下的软件一般是无法直接运行的Linux中。</li>
</ul>
<p><a href="">Ps：我们在学习Linux时，参考Windows下做了什么，就在Linux中做什么</a></p>
</blockquote>
<h3 id="三、Linux安装"><a href="#三、Linux安装" class="headerlink" title="三、Linux安装"></a>三、Linux安装</h3><hr>
<blockquote>
<ul>
<li><p>安装Linux，我们需要一个虚拟机，为了安装虚拟环境：VMware或者Virtual Box（采用VMware）</p>
<p> <a href="https://www.vmware.com/go/getworkstation-win">https://www.vmware.com/go/getworkstation-win</a></p>
</li>
<li><p>为了安装Linux，我们需要一个Linux的镜像文件：CentOS7版本</p>
<p> <a href="http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso">http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso</a></p>
</li>
<li><p>安装一个连接Linux的图形化界面：Xterm，SSH，XShell（Xterm）</p>
<p> <a href="https://download.mobatek.net/2012020021813110/MobaXterm_Portable_v20.1.zip">https://download.mobatek.net/2012020021813110/MobaXterm_Portable_v20.1.zip</a></p>
</li>
</ul>
</blockquote>
<h4 id="3-1-安装VMware"><a href="#3-1-安装VMware" class="headerlink" title="3.1 安装VMware"></a>3.1 安装VMware</h4><blockquote>
<p>傻瓜式安装，下一步下一步下一步……</p>
</blockquote>
<h4 id="3-2-安装Xterm"><a href="#3-2-安装Xterm" class="headerlink" title="3.2 安装Xterm"></a>3.2 安装Xterm</h4><blockquote>
<p>解压即可以使用……</p>
</blockquote>
<h4 id="3-3-在VMware中安装Linux"><a href="#3-3-在VMware中安装Linux" class="headerlink" title="3.3 在VMware中安装Linux"></a>3.3 在VMware中安装Linux</h4><blockquote>
<p>按照下图步骤，逐步安装Linux操作系统……‘</p>
</blockquote>
<h5 id="3-3-1-选择安装方式"><a href="#3-3-1-选择安装方式" class="headerlink" title="3.3.1 选择安装方式"></a>3.3.1 选择安装方式</h5><table>
<thead>
<tr>
<th align="center">选择安装方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231357367.png" alt="1586231357367" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-2-指定镜像方式"><a href="#3-3-2-指定镜像方式" class="headerlink" title="3.3.2 指定镜像方式"></a>3.3.2 指定镜像方式</h5><table>
<thead>
<tr>
<th align="center">选择稍后安装操作系统</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231394510.png" alt="1586231394510" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-3-选择操作系统类型"><a href="#3-3-3-选择操作系统类型" class="headerlink" title="3.3.3 选择操作系统类型"></a>3.3.3 选择操作系统类型</h5><table>
<thead>
<tr>
<th align="center">选择操作系统类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231434814.png" alt="1586231434814" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-4-指定虚拟机名称"><a href="#3-3-4-指定虚拟机名称" class="headerlink" title="3.3.4 指定虚拟机名称"></a>3.3.4 指定虚拟机名称</h5><table>
<thead>
<tr>
<th align="center">指定虚拟机名称，和安装目录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231466922.png" alt="1586231466922" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-5-磁盘存储方式"><a href="#3-3-5-磁盘存储方式" class="headerlink" title="3.3.5 磁盘存储方式"></a>3.3.5 磁盘存储方式</h5><table>
<thead>
<tr>
<th align="center">拆分成多个文件存储</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231519493.png" alt="1586231519493" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-6-指定虚拟机配置"><a href="#3-3-6-指定虚拟机配置" class="headerlink" title="3.3.6 指定虚拟机配置"></a>3.3.6 指定虚拟机配置</h5><table>
<thead>
<tr>
<th align="center">指定虚拟机的设置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231619526.png" alt="1586231619526" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-7-开始安装CentOS"><a href="#3-3-7-开始安装CentOS" class="headerlink" title="3.3.7 开始安装CentOS"></a>3.3.7 开始安装CentOS</h5><table>
<thead>
<tr>
<th align="center">开始界面选择语言</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231719094.png" alt="1586231719094" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-8-配置虚拟机网络连接"><a href="#3-3-8-配置虚拟机网络连接" class="headerlink" title="3.3.8 配置虚拟机网络连接"></a>3.3.8 配置虚拟机网络连接</h5><table>
<thead>
<tr>
<th align="center">配置安装位置以及网络和主机名（开启）</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231811319.png" alt="1586231811319" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-9-开始安装"><a href="#3-3-9-开始安装" class="headerlink" title="3.3.9 开始安装"></a>3.3.9 开始安装</h5><table>
<thead>
<tr>
<th align="center">9、开始安装后，设置ROOT用户的密码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586231864794.png" alt="1586231864794" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-3-10-安装成功"><a href="#3-3-10-安装成功" class="headerlink" title="3.3.10 安装成功"></a>3.3.10 安装成功</h5><table>
<thead>
<tr>
<th align="center">10、安装成功，并登录</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586232093005.png" alt="1586232093005" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h4 id="3-4-使用Xterm连接Linux"><a href="#3-4-使用Xterm连接Linux" class="headerlink" title="3.4 使用Xterm连接Linux"></a>3.4 使用Xterm连接Linux</h4><blockquote>
<p>直接在Vmware中操作Linux有很多限制，我们可以在图形化界面中操作Linux操作系统</p>
<p>具体步骤如下……</p>
</blockquote>
<h5 id="3-4-1-查看ip地址"><a href="#3-4-1-查看ip地址" class="headerlink" title="3.4.1 查看ip地址"></a>3.4.1 查看ip地址</h5><table>
<thead>
<tr>
<th align="center">查看ip地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586238155779.png" alt="1586238155779" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="3-4-2-通过Xterm连接"><a href="#3-4-2-通过Xterm连接" class="headerlink" title="3.4.2 通过Xterm连接"></a>3.4.2 通过Xterm连接</h5><table>
<thead>
<tr>
<th align="center">连接上Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1588919972667.png" alt="1588919972667" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">连接成功</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586238257999.png" alt="1586238257999" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h3 id="四、Linux的目录结构"><a href="#四、Linux的目录结构" class="headerlink" title="四、Linux的目录结构"></a>四、Linux的目录结构</h3><hr>
<blockquote>
<p>Windows的目录结构是带有盘符的。D：  E： C：，而Linux中是没有盘符的</p>
<p>在Xterm中输入ls / 查看Linux的顶级目录。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">ls /</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586239207504.png" alt="1586239207504" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<blockquote>
<p>Linux的常用目录……</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linux目录树状图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586239342796.png" alt="1586239342796" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>root：该目录为系统管理员HOME目录</li>
<li>bin：这个目录下放着经常使用的命令</li>
<li>boot：这里存放的是启动Linux时的一些核心文件</li>
<li>etc：存放系统管理所需要的配置文件和子目录</li>
<li>home：普通用户的HOME目录</li>
<li>usr：默认安装软件的目录，类似Windows中的Program Files目录</li>
<li>opt：是主机额外安装软件拜访的目录</li>
</ul>
</blockquote>
<h3 id="五、Linux的基本命令"><a href="#五、Linux的基本命令" class="headerlink" title="五、Linux的基本命令"></a>五、Linux的基本命令</h3><hr>
<blockquote>
<p>Linux中命令的基本格式：命令 【选项】 【参数】</p>
<p>需要注意，个别命令是不遵循这个格式</p>
<p>当命令中有多个选项时，可以写在一起的，并且选项也是由简写方式的 命令 -选项A选项B</p>
<p>Linux的基本操作命令，不遵循上述格式，但是后期会经常使用……</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 我是谁</span></span><br><span class="line"><span class="built_in">who</span> am i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 我在哪</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看ip 地址</span></span><br><span class="line">ip a | ip address</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 清屏</span></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. ping域名|ip</span></span><br><span class="line">ping 地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 强制停止</span></span><br><span class="line">Ctrl + C</span><br></pre></td></tr></table></figure>



<h3 id="六、Linux目录命令【重点】"><a href="#六、Linux目录命令【重点】" class="headerlink" title="六、Linux目录命令【重点】"></a>六、Linux目录命令【<code>重点</code>】</h3><hr>
<h4 id="6-1-列出目录"><a href="#6-1-列出目录" class="headerlink" title="6.1 列出目录"></a>6.1 列出目录</h4><blockquote>
<p>查看指定目录下的内容，默认查看当前目录下内容</p>
<p><a href="">Linux中的隐藏文件是以.开头的，当前目录使用.表示，上一级目录使用..表示</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> [-ald] [目录名]</span><br><span class="line"><span class="comment"># 目录名不填写，默认为当前目录。</span></span><br><span class="line"><span class="comment"># -a：列出的全部的文件，包括隐藏文件</span></span><br><span class="line"><span class="comment"># -l：列举出全部的信息</span></span><br><span class="line"><span class="comment"># -d：仅查看目录本身</span></span><br></pre></td></tr></table></figure>



<h4 id="6-2-切换目录"><a href="#6-2-切换目录" class="headerlink" title="6.2 切换目录"></a>6.2 切换目录</h4><blockquote>
<p>实现目录间切换，使用绝对路径、相对路径、特殊符号</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 具体路径 | 特殊符号</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>特殊符号</th>
<th>表达的路径</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>当前目录</td>
</tr>
<tr>
<td>..</td>
<td>上一级目录</td>
</tr>
<tr>
<td>/</td>
<td>根目录</td>
</tr>
<tr>
<td>~</td>
<td>当前登录用户的HOME目录</td>
</tr>
<tr>
<td>-</td>
<td>返回</td>
</tr>
</tbody></table>
<h4 id="6-3-创建目录"><a href="#6-3-创建目录" class="headerlink" title="6.3 创建目录"></a>6.3 创建目录</h4><blockquote>
<p>创建目录，以及创建多级目录方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] 目录名</span><br><span class="line"><span class="comment"># -p：代表创建多级目录时，使用</span></span><br></pre></td></tr></table></figure>



<h4 id="6-4-删除目录"><a href="#6-4-删除目录" class="headerlink" title="6.4 删除目录"></a>6.4 删除目录</h4><blockquote>
<p>删除非空目录或包含内容的目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能删除空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> 目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除非空目录</span></span><br><span class="line"><span class="built_in">rm</span> [-rf] 目录名</span><br><span class="line"><span class="comment"># -r：代表递归删除目录下的全部内容</span></span><br><span class="line"><span class="comment"># -f：不询问，直接删除</span></span><br></pre></td></tr></table></figure>



<h4 id="6-5-复制目录"><a href="#6-5-复制目录" class="headerlink" title="6.5 复制目录"></a>6.5 复制目录</h4><blockquote>
<p>复制目录下的全部内容</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 来源目录 目标目录</span><br><span class="line"><span class="comment"># -r：递归复制全部内容，必填项</span></span><br></pre></td></tr></table></figure>



<h4 id="6-6-移动、重命名目录"><a href="#6-6-移动、重命名目录" class="headerlink" title="6.6 移动、重命名目录"></a>6.6 移动、重命名目录</h4><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 目录名 新目录名 | 路径</span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>



<h3 id="七、Linux的文件命令【重点】"><a href="#七、Linux的文件命令【重点】" class="headerlink" title="七、Linux的文件命令【重点】"></a>七、Linux的文件命令【<code>重点</code>】</h3><hr>
<h4 id="7-1-创建文件"><a href="#7-1-创建文件" class="headerlink" title="7.1 创建文件"></a>7.1 创建文件</h4><blockquote>
<p>创建空文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名1 文件名2 ……</span><br></pre></td></tr></table></figure>



<h4 id="7-2-编辑文件"><a href="#7-2-编辑文件" class="headerlink" title="7.2 编辑文件"></a>7.2 编辑文件</h4><blockquote>
<p>编辑文件，后期最常的命令之一</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi 文件名 				<span class="comment"># 查看文件。（查看模式）</span></span><br><span class="line">i | a | o   		  <span class="comment"># 进入编辑模式。（编辑模式）</span></span><br><span class="line">                      <span class="comment"># i：在当前光标处，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># a：在当前光标后一格，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># o：在当前光标下一行，进入编辑模式。</span></span><br><span class="line">esc				      <span class="comment"># 退出编辑模式，回到查看模式。</span></span><br><span class="line">:				      <span class="comment"># 从查看模式进入到底行命令模式。（底行命名模式）</span></span><br><span class="line">                      <span class="comment"># 在底行命令模式下，输入wq：保存并退出。输入q!：不保存并退出</span></span><br><span class="line">                      <span class="comment"># 在查看模式下，摁ZZ，可以快速保存并退出。</span></span><br></pre></td></tr></table></figure>



<h4 id="7-3-vi文件时，其他操作"><a href="#7-3-vi文件时，其他操作" class="headerlink" title="7.3 vi文件时，其他操作"></a>7.3 vi文件时，其他操作</h4><blockquote>
<p>编辑文件时，常用的快捷键，方便操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在vi文件时，在底行命令模式下可以输入以下常用内容</span></span><br><span class="line"><span class="comment"># 行号操作</span></span><br><span class="line"><span class="built_in">set</span> nu              <span class="comment"># 查看文件的行号</span></span><br><span class="line">to rownum           <span class="comment"># 快速的跳转到指定行</span></span><br><span class="line"><span class="built_in">set</span> nonu            <span class="comment"># 取消行号</span></span><br><span class="line"><span class="comment"># 搜索操作</span></span><br><span class="line">/word               <span class="comment"># 类似Windows的Ctrl + F搜索文件中的具体内容所在位置，查看下一个可以输入字母n</span></span><br><span class="line"><span class="comment"># 快速定位</span></span><br><span class="line">G                   <span class="comment"># 快速跳转到最后一行</span></span><br><span class="line">gg                  <span class="comment"># 快速跳转到第一行</span></span><br></pre></td></tr></table></figure>



<h4 id="7-4-查看文件"><a href="#7-4-查看文件" class="headerlink" title="7.4 查看文件"></a>7.4 查看文件</h4><blockquote>
<p>根据不同的业务，可以选择不同的查看方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件，直接展示到最后一行</span></span><br><span class="line"><span class="built_in">cat</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第一行开始查看文件内容，展示全部</span></span><br><span class="line"><span class="built_in">tac</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从最后一行开始展示</span></span><br><span class="line"><span class="built_in">nl</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件的用时，展示行号</span></span><br><span class="line">more 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以一页一页的向下翻</span></span><br><span class="line"><span class="comment"># 嗯space向下翻页，退出时摁q</span></span><br><span class="line"></span><br><span class="line">less 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以任意的向上或者向下翻</span></span><br><span class="line"><span class="comment"># 向上或向下翻页摁PageUp和PageDown，一行一行查看，摁光标的↑↓</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查看前几行</span></span><br><span class="line"><span class="built_in">head</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查看后几行</span></span><br><span class="line"><span class="built_in">tail</span> 文件名</span><br><span class="line"><span class="comment"># tail -f 日志 监控日志</span></span><br></pre></td></tr></table></figure>



<h4 id="7-5-移动、重命名文件"><a href="#7-5-移动、重命名文件" class="headerlink" title="7.5 移动、重命名文件"></a>7.5 移动、重命名文件</h4><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 文件名 新文件名 | 路径</span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>



<h4 id="7-6-复制文件"><a href="#7-6-复制文件" class="headerlink" title="7.6 复制文件"></a>7.6 复制文件</h4><blockquote>
<p>复制文件到指定目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 文件名 目录</span><br></pre></td></tr></table></figure>



<h4 id="7-7-删除文件"><a href="#7-7-删除文件" class="headerlink" title="7.7 删除文件"></a>7.7 删除文件</h4><blockquote>
<p>删除文件方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-f] 文件名</span><br><span class="line"><span class="comment"># -f：是否询问</span></span><br></pre></td></tr></table></figure>



<h3 id="八、Linux的压缩包命令【重点】"><a href="#八、Linux的压缩包命令【重点】" class="headerlink" title="八、Linux的压缩包命令【重点】"></a>八、Linux的压缩包命令【<code>重点</code>】</h3><hr>
<h4 id="8-1-针对tar命令"><a href="#8-1-针对tar命令" class="headerlink" title="8.1 针对tar命令"></a>8.1 针对tar命令</h4><blockquote>
<p>Linux中常用的压缩包，大多是.tar，.tar.gz，tgz的</p>
</blockquote>
<h5 id="8-1-1-解压压缩包"><a href="#8-1-1-解压压缩包" class="headerlink" title="8.1.1 解压压缩包"></a>8.1.1 解压压缩包</h5><blockquote>
<p>针对压缩包后缀的情况，采用不同的参数，否则可能会损失文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar [-zxvf] 压缩包名称 [-C 路径]</span><br><span class="line"><span class="comment"># -z： 代表压缩包后缀是.gz的</span></span><br><span class="line"><span class="comment"># -x： 代表解压</span></span><br><span class="line"><span class="comment"># -v： 解压时，打印详细信息</span></span><br><span class="line"><span class="comment"># -f： -f选项必须放在所有选项的最后，代表指定文件名称</span></span><br><span class="line"><span class="comment"># -C 路径： 代表将压缩包内容解压到指定路径</span></span><br></pre></td></tr></table></figure>



<h5 id="8-1-2-打包成压缩包"><a href="#8-1-2-打包成压缩包" class="headerlink" title="8.1.2 打包成压缩包"></a>8.1.2 打包成压缩包</h5><blockquote>
<p>可以将多个文件以及目录打包成压缩包，根据选择的参数指定压缩包名</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar [-zcvf] 压缩包名称 文件1 文件2 目录1 目录2 ...</span><br><span class="line"><span class="comment"># -c： 代表打包</span></span><br><span class="line"><span class="comment"># 其他参数同上</span></span><br></pre></td></tr></table></figure>



<h4 id="8-2-针对zip类型压缩包"><a href="#8-2-针对zip类型压缩包" class="headerlink" title="8.2 针对zip类型压缩包"></a>8.2 针对zip类型压缩包</h4><blockquote>
<p>Linux不仅仅针对tar类型的压缩包，也支持zip，rar这种Windows下的压缩包。</p>
<p>不过需要安装软件针对对各种类型压缩包的操作</p>
</blockquote>
<h5 id="8-2-1-安装软件"><a href="#8-2-1-安装软件" class="headerlink" title="8.2.1 安装软件"></a>8.2.1 安装软件</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install zip     <span class="comment"># 打包程序</span></span><br><span class="line">yum -y install unzip   <span class="comment"># 解压程序</span></span><br></pre></td></tr></table></figure>



<h5 id="8-2-2-解压以及打包"><a href="#8-2-2-解压以及打包" class="headerlink" title="8.2.2 解压以及打包"></a>8.2.2 解压以及打包</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip 压缩包名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">zip 压缩包名称 文件1 文件2 目录1 目录2 ...</span><br></pre></td></tr></table></figure>



<h3 id="九、用户-amp-用户组的操作"><a href="#九、用户-amp-用户组的操作" class="headerlink" title="九、用户&amp;用户组的操作"></a>九、用户&amp;用户组的操作</h3><hr>
<h4 id="9-1-用户的常用操作命令"><a href="#9-1-用户的常用操作命令" class="headerlink" title="9.1 用户的常用操作命令"></a>9.1 用户的常用操作命令</h4><blockquote>
<p>Linux是一个多用户的操作系统，任何一个用户想要操作Linux操作系统，必须向系统管理员申请一个账号才可以，并且以这个账号的身份去操作Linux。</p>
<p>用户的账号一方面可以帮助系统管理员追踪当前用户的操作。另一方面可以控制当前用户对系统资源访问。</p>
</blockquote>
<h5 id="9-1-1-用户的创建"><a href="#9-1-1-用户的创建" class="headerlink" title="9.1.1 用户的创建"></a>9.1.1 用户的创建</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd [-cgd] [选项指定的具体内容] 用户名</span><br><span class="line"><span class="comment"># -c：代表comment，给用户添加一段注释</span></span><br><span class="line"><span class="comment"># -g：代表group，可以修改用户的所在组</span></span><br><span class="line"><span class="comment"># -d：代表指定用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h5 id="9-1-2-设置用户密码"><a href="#9-1-2-设置用户密码" class="headerlink" title="9.1.2 设置用户密码"></a>9.1.2 设置用户密码</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>



<h5 id="9-1-3-切换用户"><a href="#9-1-3-切换用户" class="headerlink" title="9.1.3 切换用户"></a>9.1.3 切换用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su 用户名</span><br><span class="line"><span class="comment"># [root@localhost ~]#   -&gt; root用户在本地登录，并且当前在~目录下，#代表是超级管理员</span></span><br><span class="line"><span class="comment"># [qf@localhost ~]$		-&gt; qf用户在本地登录，并且当前在~目录下，$代表是普通用户</span></span><br></pre></td></tr></table></figure>



<h5 id="9-1-4-删除用户"><a href="#9-1-4-删除用户" class="headerlink" title="9.1.4 删除用户"></a>9.1.4 删除用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">userdel [-r] 用户名</span><br><span class="line"><span class="comment"># -r： 代表删除用户的同时，删除该用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h5 id="9-1-5-修改用户"><a href="#9-1-5-修改用户" class="headerlink" title="9.1.5 修改用户"></a>9.1.5 修改用户</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">usermod [-cgd] [选项指定的具体内容] 用户名</span><br><span class="line"><span class="comment"># -c：代表comment，给用户添加一段注释</span></span><br><span class="line"><span class="comment"># -g：代表group，可以修改用户的所在组</span></span><br><span class="line"><span class="comment"># -d：代表指定用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h4 id="9-2-用户组的操作"><a href="#9-2-用户组的操作" class="headerlink" title="9.2 用户组的操作"></a>9.2 用户组的操作</h4><blockquote>
<p>用户的身份除了用户本身，还会分配到指定的用户组，可以通过用户组对设置一些文件的操作权限</p>
</blockquote>
<h5 id="9-2-1-创建用户组"><a href="#9-2-1-创建用户组" class="headerlink" title="9.2.1 创建用户组"></a>9.2.1 创建用户组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure>



<h5 id="9-2-2-修改用户组"><a href="#9-2-2-修改用户组" class="headerlink" title="9.2.2 修改用户组"></a>9.2.2 修改用户组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupmod [-n] [选项指定的具体内容] 用户组名</span><br><span class="line"><span class="comment"># -n 修改用户组名称</span></span><br></pre></td></tr></table></figure>



<h5 id="9-2-1-删除用户组"><a href="#9-2-1-删除用户组" class="headerlink" title="9.2.1 删除用户组"></a>9.2.1 删除用户组</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br><span class="line"><span class="comment"># 只能删除不存在用户的用户组</span></span><br></pre></td></tr></table></figure>



<h3 id="十、文件权限的修改【重点】"><a href="#十、文件权限的修改【重点】" class="headerlink" title="十、文件权限的修改【重点】"></a>十、文件权限的修改【<code>重点</code>】</h3><hr>
<blockquote>
<p>首先我们要清楚Linux文件的权限信息</p>
<p>在Linux中输入ls -l 或者 ll查看文件和目录的详细信息</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">文件详情</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586268971368.png" alt="1586268971368" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<blockquote>
<p>实例中，a目录的第一个属性用“d”标识这个a是一个目录。</p>
<p>anaconda-ks.cfg第一个属性用“-”标识他是一个文件。</p>
<p>在Linux文件详情的后面属性需要分为三组查看</p>
<ul>
<li>rwx： 代表文件拥有者的权限</li>
<li>rwx： 代表文件所属组用户的权限</li>
<li>rwx： 代表其他用户对当前文件的操作权限<ul>
<li>r： 代表read，读的权限</li>
<li>w： 代表write，写的权限</li>
<li>x： 代表execute，代表执行权限</li>
</ul>
</li>
</ul>
<p>其余信息</p>
<ul>
<li><p>后续的第一个root：代表当前文件的拥有者</p>
</li>
<li><p>后续的第二个root： 代表当前文件的所属组</p>
</li>
<li><p>后续分别为：文件的大小和最后修改时间等信息</p>
</li>
</ul>
</blockquote>
<h4 id="10-1-对文件的权限修改"><a href="#10-1-对文件的权限修改" class="headerlink" title="10.1 对文件的权限修改"></a>10.1 对文件的权限修改</h4><blockquote>
<p>使用chmod对文件的权限进行修改，一种使用数字，一种使用符号……</p>
<ul>
<li>数字方式方便操作，不过要修改整体权限信息</li>
<li>符号方式更细粒度华，不过操作麻烦</li>
</ul>
</blockquote>
<h5 id="10-1-1-数字方式"><a href="#10-1-1-数字方式" class="headerlink" title="10.1.1 数字方式"></a>10.1.1 数字方式</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] 777 文件|目录</span><br><span class="line"><span class="comment"># rwx在这三个权限中r：4，w：2，x：1</span></span><br><span class="line"><span class="comment"># -R： 当修改一个目录权限时，可以添加-R，将目录下的全部内容，都修改权限。</span></span><br></pre></td></tr></table></figure>



<h5 id="10-1-2-符号方式"><a href="#10-1-2-符号方式" class="headerlink" title="10.1.2 符号方式"></a>10.1.2 符号方式</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] a=rw 文件|目录</span><br><span class="line"><span class="comment"># user：u，group：g，other：o，all：a</span></span><br><span class="line"><span class="comment"># read：r，write：w，execute：x</span></span><br><span class="line"><span class="comment"># 赋予权限的方式 , 添加：+，减掉：-，设定：=</span></span><br><span class="line"><span class="comment"># -R： 当修改一个目录权限时，可以添加-R，将目录下的全部内容，都修改权限。</span></span><br></pre></td></tr></table></figure>





<h4 id="10-2-文件拥有者及所属组修改"><a href="#10-2-文件拥有者及所属组修改" class="headerlink" title="10.2 文件拥有者及所属组修改"></a>10.2 文件拥有者及所属组修改</h4><blockquote>
<p>chown可以直接修改拥有者和所属组，chgrp只能修改所属组……</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件的拥有者和所属组</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 拥有者：所属组 文件|目录</span><br><span class="line"><span class="comment"># 修改文件的拥有者</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 拥有者 文件|目录</span><br><span class="line"><span class="comment"># 修改文件的所属组</span></span><br><span class="line"><span class="built_in">chgrp</span> [-R] 所属组 文件|目录</span><br></pre></td></tr></table></figure>



<h3 id="十一、Linux的其他操作命令【重点】"><a href="#十一、Linux的其他操作命令【重点】" class="headerlink" title="十一、Linux的其他操作命令【重点】"></a>十一、Linux的其他操作命令【<code>重点</code>】</h3><hr>
<h4 id="11-1-进程的操作"><a href="#11-1-进程的操作" class="headerlink" title="11.1 进程的操作"></a>11.1 进程的操作</h4><blockquote>
<p>需要用到类似Windows的结束进程时，在Linux下需要使用如下命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef </span><br><span class="line"><span class="comment"># 查看全部正在运行的进程</span></span><br><span class="line">ps -ef | grep 搜索的内容</span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>



<h4 id="11-2-服务的操作"><a href="#11-2-服务的操作" class="headerlink" title="11.2 服务的操作"></a>11.2 服务的操作</h4><blockquote>
<p>和Windows下的服务操作一致，只需使用如下命令，默认为centos7版本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对服务的启动，停止，重启，开机自动启动，禁止开机自动启动，查看服务状态。</span></span><br><span class="line">systemctl start|stop|restart|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status 服务名称</span><br></pre></td></tr></table></figure>



<h4 id="11-3-端口号查看"><a href="#11-3-端口号查看" class="headerlink" title="11.3 端口号查看"></a>11.3 端口号查看</h4><blockquote>
<p>如发现端口号被占用，可以使用如下方式查找pid，并结束进程</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 想使用指定的命令需要事先下载netstat</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"><span class="comment"># 查看端口号占用情况</span></span><br><span class="line">netstat -naop | grep 端口号</span><br></pre></td></tr></table></figure>



<h4 id="11-4-访问地址"><a href="#11-4-访问地址" class="headerlink" title="11.4 访问地址"></a>11.4 访问地址</h4><blockquote>
<p>类似浏览器访问路径，无法图形化显示，一般用于测试</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl 访问地址</span><br></pre></td></tr></table></figure>



<h4 id="11-5-查找文件"><a href="#11-5-查找文件" class="headerlink" title="11.5 查找文件"></a>11.5 查找文件</h4><blockquote>
<p>在Linux中查找指定文件，参数较多，如下为根据文件名称查询</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find 路径 -<span class="built_in">type</span> f | grep profile</span><br></pre></td></tr></table></figure>



<h3 id="十二、Linux下安装软件【重点】"><a href="#十二、Linux下安装软件【重点】" class="headerlink" title="十二、Linux下安装软件【重点】"></a>十二、Linux下安装软件【<code>重点</code>】</h3><hr>
<h4 id="12-1-安装JDK"><a href="#12-1-安装JDK" class="headerlink" title="12.1 安装JDK"></a>12.1 安装JDK</h4><blockquote>
<p>在Linux下安装JDK，并配置JAVA_HOME环境变量……</p>
</blockquote>
<h5 id="12-1-1-下载JDK的压缩包"><a href="#12-1-1-下载JDK的压缩包" class="headerlink" title="12.1.1 下载JDK的压缩包"></a>12.1.1 下载JDK的压缩包</h5><blockquote>
<p>去逛网下载压缩包，由于oracle官网更新，需要登录并同意协议才允许下载</p>
<p><a href="">https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</a></p>
</blockquote>
<h5 id="12-1-2-将jdk压缩包拉取到Linux系统中"><a href="#12-1-2-将jdk压缩包拉取到Linux系统中" class="headerlink" title="12.1.2 将jdk压缩包拉取到Linux系统中"></a>12.1.2 将jdk压缩包拉取到Linux系统中</h5><blockquote>
<p>需要使用图形化界面的Sftp拖拽到Linux操作系统</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Xterm的Sftp图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1589258771046.png" alt="1589258771046" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="12-1-3-将jdk的压缩包解压"><a href="#12-1-3-将jdk的压缩包解压" class="headerlink" title="12.1.3 将jdk的压缩包解压"></a>12.1.3 将jdk的压缩包解压</h5><blockquote>
<p>后期大多软件都安装在/usr/local下，直接使用tar解压</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u241-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h5 id="12-1-4-将jdk的目录名修改一下"><a href="#12-1-4-将jdk的目录名修改一下" class="headerlink" title="12.1.4 将jdk的目录名修改一下"></a>12.1.4 将jdk的目录名修改一下</h5><blockquote>
<p>为了方便配置环境变量，修改一下目录名称</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">mv</span> jdk1.8.0_241 jdk</span><br></pre></td></tr></table></figure>



<h5 id="12-1-5-配置环境变量"><a href="#12-1-5-配置环境变量" class="headerlink" title="12.1.5 配置环境变量"></a>12.1.5 配置环境变量</h5><blockquote>
<p>Linux提供了两种环境变量的文件</p>
<ul>
<li>第一个是用户级别的环境变量，存放在：~/.bashrc</li>
<li>第二个是系统级别的环境变量，存放在：/etc/profile</li>
</ul>
<p>修改哪个文件都可以，毕竟虚拟机就我们自己使用</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在环境变量文件中，添加如下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 重新加载环境变量文件</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 最终测试</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">测试效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586307863331.png" alt="1586307863331" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h4 id="12-2-安装MySQL"><a href="#12-2-安装MySQL" class="headerlink" title="12.2 安装MySQL"></a>12.2 安装MySQL</h4><blockquote>
<p>在MySQL下用yum的方式安装MySQL……</p>
</blockquote>
<h5 id="12-2-1-安装MySQL的YUM存储库"><a href="#12-2-1-安装MySQL的YUM存储库" class="headerlink" title="12.2.1 安装MySQL的YUM存储库"></a>12.2.1 安装MySQL的YUM存储库</h5><blockquote>
<p>使用wget下载即可，不过需要先下载wget，再通过wget下载rpm包</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先通过yum下载wget命令</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="comment"># 通过wget下载MySQL存储库</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>



<h5 id="12-2-2-安装下载好的rpm包"><a href="#12-2-2-安装下载好的rpm包" class="headerlink" title="12.2.2 安装下载好的rpm包"></a>12.2.2 安装下载好的rpm包</h5><blockquote>
<p>使用rpm包的命令直接安装</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装rpm包</span></span><br><span class="line">rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="comment"># 查看rpm包</span></span><br><span class="line">rpm -qa | grep 内容</span><br><span class="line"><span class="comment"># 卸载rpm  （不需要指定当前命令。。。）</span></span><br><span class="line">rpm -e --nodeps rpm名称</span><br></pre></td></tr></table></figure>



<h5 id="12-2-3-选择发行版本"><a href="#12-2-3-选择发行版本" class="headerlink" title="12.2.3 选择发行版本"></a>12.2.3 选择发行版本</h5><blockquote>
<p>由于默认安装8.0版本的MySQL，我们需要修改为5.7版本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看一下默认选择的发行版本</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"><span class="comment"># 通过编辑/etc/yum.repos.d/mysql-community.repo文件，去修改发行版本</span></span><br><span class="line"><span class="comment"># 将80的enabled更改为0，将67的enabled更改为1，保存即可，再次通过yum repolist all | grep mysql查看</span></span><br><span class="line"><span class="comment"># 效果如下</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">MySQL安装版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586309805089.png" alt="1586309805089" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h5 id="12-2-4-安装MySQL社区版服务"><a href="#12-2-4-安装MySQL社区版服务" class="headerlink" title="12.2.4 安装MySQL社区版服务"></a>12.2.4 安装MySQL社区版服务</h5><blockquote>
<p>开始安装，这一步需要下载一段时间，下载失败就是网络较差了，学会科学上网</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>



<h5 id="12-2-5-启动MySQL服务，并连接"><a href="#12-2-5-启动MySQL服务，并连接" class="headerlink" title="12.2.5 启动MySQL服务，并连接"></a>12.2.5 启动MySQL服务，并连接</h5><blockquote>
<p>安装成功后，手动启动，并使用日志中的密码登陆，而且第一个操作必须是修改密码，才可后续正常操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动MySQL服务</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="comment"># 查看初始化密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"><span class="comment"># 连接MySQL服务</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">Enter password:随机密码</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;P@ssw0rd&#x27;</span>;</span><br><span class="line"><span class="comment"># 要求密码，必须携带大写字母，小写字母，数字，特殊符号</span></span><br></pre></td></tr></table></figure>



<h5 id="12-2-6-开启远程连接"><a href="#12-2-6-开启远程连接" class="headerlink" title="12.2.6 开启远程连接"></a>12.2.6 开启远程连接</h5><blockquote>
<p>默认MySQL禁止远程链接，需要单独创建一个用户开启远程链接，这样就可以在windows下使用图形化工具连接</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;eric&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;P@ssw0rd&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>



<h4 id="12-3-安装Tomcat"><a href="#12-3-安装Tomcat" class="headerlink" title="12.3 安装Tomcat"></a>12.3 安装Tomcat</h4><blockquote>
<p>在Linux下安装Tomcat，以便部署工程到Linux操作系统</p>
</blockquote>
<h5 id="12-3-1-下载Tomcat的压缩包"><a href="#12-3-1-下载Tomcat的压缩包" class="headerlink" title="12.3.1 下载Tomcat的压缩包"></a>12.3.1 下载Tomcat的压缩包</h5><blockquote>
<p>通过wget直接下载即可</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.53/bin/apache-tomcat-8.5.53.tar.gz</span><br></pre></td></tr></table></figure>



<h5 id="12-3-2-解压压缩包"><a href="#12-3-2-解压压缩包" class="headerlink" title="12.3.2 解压压缩包"></a>12.3.2 解压压缩包</h5><blockquote>
<p>一样解压到/usr/local目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.53.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>



<h5 id="12-3-3-启动Tomcat并监听日志"><a href="#12-3-3-启动Tomcat并监听日志" class="headerlink" title="12.3.3 启动Tomcat并监听日志"></a>12.3.3 启动Tomcat并监听日志</h5><blockquote>
<p>通过./执行可运行文件，并使用tail监控日志信息</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转到tomcat的bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/apache-tomcat-8.5.53/bin</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./startup.sh</span><br><span class="line"><span class="comment"># 监控日志</span></span><br><span class="line"><span class="built_in">cd</span> ../logs</span><br><span class="line"><span class="built_in">tail</span> -f catalina.out</span><br><span class="line"><span class="comment"># 启动成功如下</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">日志及Tomcat首页</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/img/Linux/1586313889843.png" alt="1586313889843" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
<tr>
<td align="center"><img src="/img/Linux/1586313916362.png" alt="1586313916362" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></td>
</tr>
</tbody></table>
<h3 id="十三、部署SSM工程"><a href="#十三、部署SSM工程" class="headerlink" title="十三、部署SSM工程"></a>十三、部署SSM工程</h3><hr>
<blockquote>
<p>部署项目到Linux中需要注意一下内容：</p>
<ul>
<li>项目要保证在Windows下是没有问题的，再考虑部署到Linux。</li>
<li>将开发环境中的内容更改为测试环境。<ul>
<li>连接数据库的信息。</li>
<li>存放文件的路径。</li>
<li>日志文件存放的位置。</li>
<li>项目路径问题。</li>
</ul>
</li>
<li>将Maven项目打包。</li>
<li>根据项目路径的不同，将项目部署到Tomcat中。</li>
<li>在部署到Linux操作系统中后，一定要查看日志。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/03/31/MySQL/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/2023/03/31/Nodejs/</url>
    <content><![CDATA[<h1 id="编辑中…………"><a href="#编辑中…………" class="headerlink" title="编辑中…………."></a>编辑中………….</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2023/03/31/Mybatis/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/03/31/Redis/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2023/03/31/Spring/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2023/03/31/SpringBoot/</url>
    <content><![CDATA[<h1 id="编辑中………"><a href="#编辑中………" class="headerlink" title="编辑中……….."></a>编辑中………..</h1>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue2.js</title>
    <url>/2023/03/31/Vue/</url>
    <content><![CDATA[<h1 id="编辑中…………"><a href="#编辑中…………" class="headerlink" title="编辑中…………."></a>编辑中………….</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2023/03/31/SpringMVC/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p>
<p>构建工具：maven3.5.4</p>
<p>服务器：tomcat7</p>
<p>Spring版本：5.3.1</p>
<h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<p><img src="/img/SpringMVC/img001.png" alt="images" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p>
<h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">		而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">		因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p>
<p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p>
</blockquote>
<h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<p>处理get请求的映射–&gt;@GetMapping</p>
<p>处理post请求的映射–&gt;@PostMapping</p>
<p>处理put请求的映射–&gt;@PutMapping</p>
<p>处理delete请求的映射–&gt;@DeleteMapping</p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p>
</blockquote>
<h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p>
<p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p>
<p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用**时，只能使用/**/xxx的方式</p>
<h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p>
<p>rest方式：/deleteUser/1</p>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure>

<h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>
</blockquote>
<h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p>
<h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/SpringMVC/img002.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如”forward:/“，”forward:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/SpringMVC/img003.png" alt="image-20210706201316593" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如”redirect:/“，”redirect:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/SpringMVC/img004.png" alt="image-20210706201602267" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven /&gt;</p>
</blockquote>
<h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>
<h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p>
</li>
<li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p>
</li>
<li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>
</li>
<li><p>```<br>String paramValue = request.getParameter(this.methodParam);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 八、RESTful案例</span><br><span class="line"></span><br><span class="line">### 1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> public class Employee &#123;</span><br><span class="line"> </span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"> </span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line">    </span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<ul>
<li><p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody></table>
<h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过vue处理点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<p>ResponseEntity</p>
<h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>requestBody:username=admin&amp;password=123456</p>
<h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a>, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p>
<h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：浏览器页面显示success</p>
<h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>

<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器的页面中展示的结果：</p>
<p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p>
<h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;通过vue和axios处理点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">testAjax</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:event.<span class="property">target</span>.<span class="property">href</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAjax</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</p>
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：</p>
<p>a&gt;添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        		properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        	--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p><img src="/img/SpringMVC/img005.png" alt="images" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            	handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            	interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            	interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           	<span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol>
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
</li>
</ol>
<p>a) 不存在</p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<p><img src="/img/SpringMVC/img006.png" alt="image-20210709214911404" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/SpringMVC/img007.png" alt="image-20210709214947432" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p><img src="/img/SpringMVC/img008.png" alt="image-20210709215255693" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/img/SpringMVC/img009.png" alt="image-20210709215336097" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>b) 存在则执行下面的流程</p>
<ol start="3">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
</li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
</li>
</ol>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<ol start="7">
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
</li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
</li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p>
</li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
</search>
